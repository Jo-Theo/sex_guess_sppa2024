ggplot(aes(x = Bout_length, fill = Pair)) +
geom_density(alpha = 0.5) +  # Adjust transparency with alpha
labs(title = "Density Plot by Pair",
x = "Bout length",
y = "Density") +
theme_minimal()
View(individual_bout)
extract_individual_bout <- function(behaviours){
sub_session_order <- unique(behaviours$Sub_session)
behaviours %>%
split(.$Sub_session) %>%
map_dfr(function(sub_session){
sub_session <- .get_bout_ind(sub_session, na_last_first = T)
bind_rows(
.contract_bout(sub_session,male_bird = F),
.contract_bout(sub_session,male_bird = T)
)
}) %>% # Bout each of them
mutate(Sub_session = factor(Sub_session,sub_session_order)) %>% # reorder
arrange(Sub_session) %>%
mutate(Id_bird = paste0(Pair,"_",Sex))
}
ggplot(aes(x = Bout_length, fill = ID_bird)) +
geom_density(alpha = 0.5) +  # Adjust transparency with alpha
labs(title = "Density Plot by Pair",
x = "Bout length",
y = "Density") +
theme_minimal()
# .rs.restartR()
rm(list = ls(all.names = T))
source("jo_dev/dev/bout_manipulation.R")
.rs.restartR()
behaviours <- read.csv2("Jo_dev/Data/bouted_behaviours_SPPA2024_1.csv")
# defining sub_session
sub_session_behaviours <- sub_session_by_session(behaviours, length_min = 1)
sub_session_behaviours$Sub_session %>%
as.factor() %>%
summary() %>%
sort()
individual_bout <- extract_individual_bout(sub_session_behaviours)
individual_bout %>%
ggplot(aes(x = Bout_length, fill = Sex)) +
geom_density(alpha = 0.5) +  # Adjust transparency with alpha
labs(title = "Density Plot by sex",
x = "Bout length",
y = "Density") +
theme_minimal()
individual_bout %>%
mutate(Pair = as.factor(Pair)) %>%
ggplot(aes(x = Bout_length, fill = Pair)) +
geom_density(alpha = 0.5) +  # Adjust transparency with alpha
labs(title = "Density Plot by Pair",
x = "Bout length",
y = "Density") +
theme_minimal()
individual_bout
individual_bout %>%
ggplot(aes(x = Bout_length, fill = ID_bird)) +
geom_density(alpha = 0.5) +  # Adjust transparency with alpha
labs(title = "Density Plot by Pair",
x = "Bout length",
y = "Density") +
theme_minimal()
View(individual_bout)
individual_bout %>%
ggplot(aes(x = Bout_length, fill = Id_bird)) +
geom_density(alpha = 0.5) +  # Adjust transparency with alpha
labs(title = "Density Plot by Pair",
x = "Bout length",
y = "Density") +
theme_minimal()
View(behaviours)
individual_bout %>%
ggplot(aes(x = Bout_length, fill = BreedingStage)) +
geom_density(alpha = 0.5) +  # Adjust transparency with alpha
labs(title = "Density Plot by Pair",
x = "Bout length",
y = "Density") +
theme_minimal()
View(sub_session_behaviours)
View(behaviours)
View(sub_session_behaviours)
View(individual_bout)
View(sub_session_behaviours)
individual_bout %>%
ggplot(aes(x = Bout_length, fill = BreedingStage)) +
geom_density(alpha = 0.5) +  # Adjust transparency with alpha
labs(title = "Density Plot by Pair",
x = "Bout length",
y = "Density") +
theme_minimal()
individual_bout %>%
filter(BreedingStage = "Digging, Building")
individual_bout %>%
filter(BreedingStage == "Digging, Building")
View(individual_bout)
glm(data = individual_bout, formula = Bout_length ~ 1, family = Gamma)
glm(data = individual_bout, formula = Bout_length ~ 1, family = Poisson)
glm(data = individual_bout, formula = Bout_length ~ 1, family = oisson)
glm(data = individual_bout, formula = Bout_length ~ 1, family = poisson)
library(randomForest)
install.packages("randomForest")
library(randomForest)
ind <- sample(2, nrow(individual_bout), replace = TRUE, prob = c(0.7, 0.3))
train <- individual_bout[ind==1,]
test <- individual_bout[ind==2,]
rf <- randomForest(Bird_in~., data=train, proximity=TRUE)
individual_bout %>%
mutate(Nb_bird = as.factor(Nb_bird))
individual_bout %>%
mutate(Nb_bird = as.factor(Nb_bird))
set.seed(222)
ind <- sample(2, nrow(individual_bout), replace = TRUE, prob = c(0.7, 0.3))
train <- individual_bout[ind==1,]
test <- individual_bout[ind==2,]
rf <- randomForest(Bird_in~., data=train, proximity=TRUE)
names(individual_bout)
rf <- randomForest(Bird_in ~ TimeAction + BreedingStage + Pair + Nest + Date + Bout_length + Sex + Id_bird, data=train, proximity=TRUE)
print(rf)
rf <- randomForest(Bird_in ~ TimeAction + BreedingStage + Pair + Nest + Date + Bout_length + Sex + Id_bird, data=train)
# .rs.restartR()
rm(list = ls(all.names = T))
source("jo_dev/dev/bout_manipulation.R")
behaviours <- read.csv2("Jo_dev/Data/bouted_behaviours_SPPA2024_1.csv")
# defining sub_session
sub_session_behaviours <- sub_session_by_session(behaviours, length_min = 1)
sub_session_behaviours$Sub_session %>%
as.factor() %>%
summary() %>%
sort()
individual_bout <- extract_individual_bout(sub_session_behaviours)
individual_bout %>%
filter(BreedingStage == "Digging, Building")
individual_bout %>%
ggplot(aes(x = Bout_length, fill = BreedingStage)) +
geom_density(alpha = 0.5) +  # Adjust transparency with alpha
labs(title = "Density Plot by Pair",
x = "Bout length",
y = "Density") +
theme_minimal()
individual_bout %>%
ggplot(aes(x = Bout_length, fill = Sex)) +
geom_density(alpha = 0.5) +  # Adjust transparency with alpha
labs(title = "Density Plot by sex",
x = "Bout length",
y = "Density") +
theme_minimal()
individual_bout %>%
mutate(Pair = as.factor(Pair)) %>%
ggplot(aes(x = Bout_length, fill = Pair)) +
geom_density(alpha = 0.5) +  # Adjust transparency with alpha
labs(title = "Density Plot by Pair",
x = "Bout length",
y = "Density") +
theme_minimal()
individual_bout %>%
ggplot(aes(x = Bout_length, fill = Id_bird)) +
geom_density(alpha = 0.5) +  # Adjust transparency with alpha
labs(title = "Density Plot by Pair",
x = "Bout length",
y = "Density") +
theme_minimal()
library(randomForest)
individual_bout %>%
mutate(Nb_bird = as.factor(Nb_bird))
set.seed(222)
ind <- sample(2, nrow(individual_bout), replace = TRUE, prob = c(0.7, 0.3))
train <- individual_bout[ind==1,]
test <- individual_bout[ind==2,]
rf <- randomForest(Bird_in ~ TimeAction + BreedingStage + Pair + Nest + Date + Bout_length + Sex + Id_bird, data=train, proximity=TRUE)
View(individual_bout)
glm(data = individual_bout, formula = Bird_in ~ Bout_length + Nb_bird + TimeAction + BreedingStage + Pair + Nest + Date + Sex + Id_bird, family = poisson)
individual_bout %>%
map(class)
individual_bout %>%
mutate(TimeAction = as_hms(TimeAction)) %>%
map(class)
individual_bout %>%
mutate(TimeAction = as_hms(TimeAction),
BreedingStage = as.factor(BreedingStage),
Pair = as.factor(Pair),
Nest = as.factor(Nest),
Date = as.Date(Date),
Year = as.factor(Year),
Sex = as.factor(Sex),
Id_bird = as.factor(Id_bird)) %>%
map(class)
glm(data = individual_bout, formula = Bird_in ~ Bout_length + Nb_bird + TimeAction + BreedingStage + Pair + Nest + Date + Sex + Id_bird, family = poisson)
individual_bout <- individual_bout %>%
mutate(TimeAction = as_hms(TimeAction),
BreedingStage = as.factor(BreedingStage),
Pair = as.factor(Pair),
Nest = as.factor(Nest),
Date = as.Date(Date),
Year = as.factor(Year),
Sex = as.factor(Sex),
Id_bird = as.factor(Id_bird))
glm(data = individual_bout, formula = Bird_in ~ Bout_length + Nb_bird + TimeAction + BreedingStage + Pair + Nest + Date + Sex + Id_bird, family = poisson)
glm(data = individual_bout, formula = Bird_in ~ I(Bout_length**2) + Bout_length + Nb_bird + TimeAction + BreedingStage + Pair + Nest + Date + Sex + Id_bird, family = poisson)
glm(data = individual_bout, formula = Bird_in ~ I(Bout_length**2) + Bout_length + Nb_bird + TimeAction + BreedingStage + Pair + Nest + Date + Sex + Id_bird, family = Gamma)
library(tidymodels)
individual_bout <- individual_bout %>%
mutate(TimeAction = as_hms(TimeAction),
BreedingStage = as.factor(BreedingStage),
Pair = as.factor(Pair),
Nest = as.factor(Nest),
Date = as.Date(Date),
Year = as.factor(Year),
Sex = as.factor(Sex),
Id_bird = as.factor(Id_bird))
glm(data = individual_bout, formula = Bird_in ~ I(Bout_length**2) + Bout_length + Nb_bird + TimeAction + BreedingStage + Pair + Nest + Date + Sex + Id_bird, family = )
split <- initial_split(individual_bout, prop = 0.8, strata = Bird_in)
train <- split %>%
training()
test <- split %>%
testing()
logistic_reg(mixture = double(1), penalty = double(1)) %>%
set_engine("glmnet") %>%
set_mode("classification") %>%
fit(Bird_in ~ ., data = train)
logistic_reg(mixture = double(1), penalty = double(1)) %>%
set_engine("glmnet") %>%
set_mode("regression") %>%
fit(Bird_in ~ ., data = train)
logistic_reg(mixture = double(1), penalty = double(1)) %>%
set_engine("glmnet") %>%
set_mode("regression") %>%
fit(Bird_in ~ I(Bout_length**2) + Bout_length + Nb_bird + TimeAction + BreedingStage + Pair + Nest + Date + Sex + Id_bird, data = train)
logistic_reg(mixture = double(1), penalty = double(1)) %>%
set_engine("glmnet") %>%
set_mode("classification") %>%
fit(Bird_in ~ I(Bout_length**2) + Bout_length + Nb_bird + TimeAction + BreedingStage + Pair + Nest + Date + Sex + Id_bird, data = train)
individual_bout <- individual_bout %>%
mutate(Bird_in = as.fator(Bird_in),
TimeAction = as_hms(TimeAction),
BreedingStage = as.factor(BreedingStage),
Pair = as.factor(Pair),
Nest = as.factor(Nest),
Date = as.Date(Date),
Year = as.factor(Year),
Sex = as.factor(Sex),
Id_bird = as.factor(Id_bird))
individual_bout <- individual_bout %>%
mutate(Bird_in = as.factor(Bird_in),
TimeAction = as_hms(TimeAction),
BreedingStage = as.factor(BreedingStage),
Pair = as.factor(Pair),
Nest = as.factor(Nest),
Date = as.Date(Date),
Year = as.factor(Year),
Sex = as.factor(Sex),
Id_bird = as.factor(Id_bird))
# Split data into train and test
set.seed(421)
split <- initial_split(individual_bout, prop = 0.8, strata = Bird_in)
train <- split %>%
training()
test <- split %>%
testing()
logistic_reg(mixture = double(1), penalty = double(1)) %>%
set_engine("glmnet") %>%
set_mode("classification") %>%
fit(Bird_in ~ I(Bout_length**2) + Bout_length + Nb_bird + TimeAction + BreedingStage + Pair + Nest + Date + Sex + Id_bird, data = train)
model <- logistic_reg(mixture = double(1), penalty = double(1)) %>%
set_engine("glmnet") %>%
set_mode("classification") %>%
fit(Bird_in ~ I(Bout_length**2) + Bout_length + Nb_bird + TimeAction + BreedingStage + Pair + Nest + Date + Sex + Id_bird, data = train)
tidy(model)
pred_proba <- predict(model,
new_data = test,
type = "prob")
pred_class <- predict(model,
new_data = test,
type = "class")
results <- test %>%
select(Bird) %>%
bind_cols(pred_class, pred_proba)
results <- test %>%
select(Bird_in) %>%
bind_cols(pred_class, pred_proba)
accuracy(results, truth = y, estimate = .pred_class)
accuracy(results, truth = Bird_in, estimate = .pred_class)
# .rs.restartR()
rm(list = ls(all.names = T))
source("jo_dev/dev/bout_manipulation.R")
behaviours <- read.csv2("Jo_dev/Data/bouted_behaviours_SPPA2024_1.csv")
# defining sub_session
sub_session_behaviours <- sub_session_by_session(behaviours, length_min = 1)
sub_session_behaviours$Sub_session %>%
as.factor() %>%
summary() %>%
sort()
individual_bout <- extract_individual_bout(sub_session_behaviours)
individual_bout %>%
filter(BreedingStage == "Digging, Building")
individual_bout %>%
ggplot(aes(x = Bout_length, fill = BreedingStage)) +
geom_density(alpha = 0.5) +  # Adjust transparency with alpha
labs(title = "Density Plot by Pair",
x = "Bout length",
y = "Density") +
theme_minimal()
individual_bout %>%
ggplot(aes(x = Bout_length, fill = Sex)) +
geom_density(alpha = 0.5) +  # Adjust transparency with alpha
labs(title = "Density Plot by sex",
x = "Bout length",
y = "Density") +
theme_minimal()
individual_bout %>%
mutate(Pair = as.factor(Pair)) %>%
ggplot(aes(x = Bout_length, fill = Pair)) +
geom_density(alpha = 0.5) +  # Adjust transparency with alpha
labs(title = "Density Plot by Pair",
x = "Bout length",
y = "Density") +
theme_minimal()
individual_bout %>%
ggplot(aes(x = Bout_length, fill = Id_bird)) +
geom_density(alpha = 0.5) +  # Adjust transparency with alpha
labs(title = "Density Plot by Pair",
x = "Bout length",
y = "Density") +
theme_minimal()
individual_bout <- individual_bout %>%
mutate(TimeAction = as_hms(TimeAction),
BreedingStage = as.factor(BreedingStage),
Pair = as.factor(Pair),
Nest = as.factor(Nest),
Date = as.Date(Date),
Year = as.factor(Year),
Sex = as.factor(Sex),
Id_bird = as.factor(Id_bird))
library(tidymodels)
individual_bout <- individual_bout %>%
mutate(TimeAction = as_hms(TimeAction),
BreedingStage = as.factor(BreedingStage),
Pair = as.factor(Pair),
Nest = as.factor(Nest),
Date = as.Date(Date),
Year = as.factor(Year),
Sex = as.factor(Sex),
Id_bird = as.factor(Id_bird))
split <- initial_split(individual_bout, prop = 0.8, strata = Bout_length)
train <- split %>%
training()
test <- split %>%
testing()
View(individual_bout)
model <- poisson_reg(mixture = 0.5, penalty = double(1)) %>%
set_engine("glmnet") %>%
fit(Bout_length ~ Bird_in + Nb_bird + TimeAction + BreedingStage + Pair + Nest + Date + Sex + Id_bird, data = train)
library(poissonreg)
# library(randomForest)
install.packages("poissonreg")
library(poissonreg)
model <- poisson_reg(mixture = 0.5, penalty = double(1)) %>%
set_engine("glmnet") %>%
translate() %>%
fit(Bout_length ~ Bird_in + Nb_bird + TimeAction + BreedingStage + Pair + Nest + Date + Sex + Id_bird, data = train)
tidy(model)
pred_proba <- predict(model,
new_data = test,
type = "prob")
plot(model)
library(glmnet)
pred <- train[,c("Bird_in","Nb_bird", "TimeAction", "BreedingStage","Pair","Nest","Date","Sex","Id_bird")]
pred <- train[,c("Bird_in","Nb_bird", "TimeAction", "BreedingStage","Pair","Nest","Date","Sex","Id_bird")]
model <- glmnet(pred, train$Bout_length, alpha = 0.2, weights = wts, nlambda = 20)
model <- glmnet(pred, train$Bout_length, alpha = 0.2,family =  "poisson")
View(train)
# defining sub_session
sub_session_behaviours <- sub_session_by_session(behaviours, length_min = 1) %>%
mutate(Bout_length = Bout_length + 1)
sub_session_behaviours$Sub_session %>%
as.factor() %>%
summary() %>%
sort()
individual_bout <- extract_individual_bout(sub_session_behaviours)
individual_bout %>%
filter(BreedingStage == "Digging, Building")
individual_bout %>%
ggplot(aes(x = Bout_length, fill = BreedingStage)) +
geom_density(alpha = 0.5) +  # Adjust transparency with alpha
labs(title = "Density Plot by Pair",
x = "Bout length",
y = "Density") +
theme_minimal()
individual_bout %>%
ggplot(aes(x = Bout_length, fill = Sex)) +
geom_density(alpha = 0.5) +  # Adjust transparency with alpha
labs(title = "Density Plot by sex",
x = "Bout length",
y = "Density") +
theme_minimal()
individual_bout %>%
mutate(Pair = as.factor(Pair)) %>%
ggplot(aes(x = Bout_length, fill = Pair)) +
geom_density(alpha = 0.5) +  # Adjust transparency with alpha
labs(title = "Density Plot by Pair",
x = "Bout length",
y = "Density") +
theme_minimal()
individual_bout %>%
ggplot(aes(x = Bout_length, fill = Id_bird)) +
geom_density(alpha = 0.5) +  # Adjust transparency with alpha
labs(title = "Density Plot by Pair",
x = "Bout length",
y = "Density") +
theme_minimal()
# defining sub_session
sub_session_behaviours <- sub_session_by_session(behaviours, length_min = 1) %>%
mutate(Bout_length = ifelse(Bout_length == 0,1 ,Bout_length))
sub_session_behaviours$Sub_session %>%
as.factor() %>%
summary() %>%
sort()
individual_bout <- extract_individual_bout(sub_session_behaviours)
individual_bout %>%
filter(BreedingStage == "Digging, Building")
individual_bout %>%
ggplot(aes(x = Bout_length, fill = BreedingStage)) +
geom_density(alpha = 0.5) +  # Adjust transparency with alpha
labs(title = "Density Plot by Pair",
x = "Bout length",
y = "Density") +
theme_minimal()
individual_bout %>%
ggplot(aes(x = Bout_length, fill = Sex)) +
geom_density(alpha = 0.5) +  # Adjust transparency with alpha
labs(title = "Density Plot by sex",
x = "Bout length",
y = "Density") +
theme_minimal()
individual_bout %>%
mutate(Pair = as.factor(Pair)) %>%
ggplot(aes(x = Bout_length, fill = Pair)) +
geom_density(alpha = 0.5) +  # Adjust transparency with alpha
labs(title = "Density Plot by Pair",
x = "Bout length",
y = "Density") +
theme_minimal()
individual_bout %>%
ggplot(aes(x = Bout_length, fill = Id_bird)) +
geom_density(alpha = 0.5) +  # Adjust transparency with alpha
labs(title = "Density Plot by Pair",
x = "Bout length",
y = "Density") +
theme_minimal()
individual_bout <- individual_bout %>%
mutate(TimeAction = as_hms(TimeAction),
BreedingStage = as.factor(BreedingStage),
Pair = as.factor(Pair),
Nest = as.factor(Nest),
Date = as.Date(Date),
Year = as.factor(Year),
Sex = as.factor(Sex),
Id_bird = as.factor(Id_bird))
split <- initial_split(individual_bout, prop = 0.8, strata = Bout_length)
train <- split %>%
training()
test <- split %>%
testing()
library(glmnet)
pred <- train[,c("Bird_in","Nb_bird", "TimeAction", "BreedingStage","Pair","Nest","Date","Sex","Id_bird")]
model <- glmnet(pred, train$Bout_length, alpha = 0.2,family =  "poisson")
plot(model)
pred_proba <- predict(model,
new_data = test,
type = "prob")
pred_proba <- predict(model,
new_data = test,
type = "response")
pred_class <- predict(model,
new_data = test,
type = "link")
tidy(model)
pred_proba <- predict(model,
new_data = test,
type = "response")
pred_proba <- predict(model,
newx = test,
type = "response")
# Split data into train and test
set.seed(421)
split <- individual_bout[,c("Bout_length","Bird_in","Nb_bird", "TimeAction", "BreedingStage","Pair","Nest","Date","Sex","Id_bird")] %>%
initial_split( prop = 0.8, strata = Bird_in)
train <- split %>%
training()
test <- split %>%
testing()
model <- glmnet(train[,-"Bout_length"], train$Bout_length, alpha = 0.2,family =  "poisson")
model <- glmnet(train[,-c("Bout_length")], train$Bout_length, alpha = 0.2,family =  "poisson")
model <- glmnet(train[,-1], train$Bout_length, alpha = 0.2,family =  "poisson")
train[,-1]
View(individual_bout)
split <- individual_bout[,c("Bout_length","Bird_in","Nb_bird", "TimeAction", "BreedingStage","Pair","Nest","Date","Sex","Id_bird")] %>%
initial_split( prop = 0.8, strata = "ID_bird")
split <- individual_bout[,c("Bout_length","Bird_in","Nb_bird", "TimeAction", "BreedingStage","Pair","Nest","Date","Sex","Id_bird")] %>%
initial_split( prop = 0.8, strata = "Id_bird")
train <- split %>%
training()
test <- split %>%
testing()
model <- glmnet(train[,-1], train$Bout_length, alpha = 0.2,family =  "poisson")
plot(model)
pred_proba <- predict(model,
newx = test[,-1],
type = "response")
pred_proba <- predict(model,
newx = test[,-1],
type = "response")
